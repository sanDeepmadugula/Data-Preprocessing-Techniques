mape = mean((abs(err)/electest)*100)
mape
checkresiduals(elecforecast)
autoplot(AirPassengers)
AirPassengers
## Holtwinters model
airdecomp = decompose(AirPassengers)
autoplot(airdecomp)
airtrain = window(AirPassengers, end = c(1959,12))
airtest = window(AirPassengers, start=c(1960,1))
airhw_add = HoltWinters(airtrain, seasonal = "additive")
###
plot(airhw_add)
airforec = forecast(airhw_add, h=12)
err = airtest - airforec$mean
airforec = forecast(airhw_add, h=12)
err = airtest - airforec$mean
mape = mean((abs(err)/airtest)*100)
mape
### hotlwinters multiplicative model
airhw_mul = HoltWinters(airtrain, seasonal = "multiplicative")
plot(airhw_mul)
airforec = forecast(airhw_mul, h=12)
err = airtest - airforec$mean
mape = mean((abs(err)/airtest)*100)
mape
airdiff1 = diff(AirPassengers, 1)
plot(airdiff1)
airdiff2 = diff(AirPassengers, 2)
plot(airdiff2)
airbox = BoxCox(AirPassengers, lambda = "auto")
plot(airbox)
?BoxCox
airbox
rainforec = forecast(rainhw, h=12)
err = raintest - rainforec$mean
rmse = sqrt(mean(err**2))
rmse
raindiff1 = diff(rainseries,1)
plot(raindiff1)
raindiff2 = diff(rainseries,2)
plot(raindiff2)
### adftest
adf.test(raindiff2)
pacf(raintrain)
acf(raintrain)
rain_Arima = Arima(raintrain, order=c(1,2,2), seasonal = c(0,2,2))
rainforec = forecast(rain_Arima, h=12)
err = raintest - rainforec$mean
rmse = sqrt(mean(err**2))
rmse
checkresiduals(rain_Arima)
icecream = read.csv("Icecream.csv")
iceseries = ts(icecream$cons, start=c(2015,1), frequency = 12)
autoplot(iceseries)
icedecomp = decompose(iceseries)
plot(icedecomp)
icetrain = window(iceseries, end = c(2016,12))
icetest = window(iceseries, start = c(2017,1))
icearima = auto.arima(icetrain, seasonal = F)
icearima
pacf(icetrain)
acf(icetrain)
auto.arima(iceseries)
ice_ar = Arima(icetrain, order=c(1,0,0))
VehicleFailureData <- read.csv("D:/R by Bharatendra Rai/VehicleFailureData.csv")
View(VehicleFailureData)
str(VehicleFailureData)
head(VehicleFailureData)
vehicle<- VehicleFailureData
head(vehicle)
# histogram
hist(vehicle$lc)
hist(vehicle$lc,breaks = 30,xlim = c(0,1500),ylim = c(0,1000),col = "green",
xlab = "Labour Cost",ylab = "Frequencey",main = "Histogram of Labour Cost")
hist(vehicle$lc,breaks = 30,xlim = c(0,1500),ylim = c(0,500),col = "green",
xlab = "Labour Cost",ylab = "Frequencey",main = "Histogram of Labour Cost")
# BarPlot
plot(vehicle$State)
?plot
# Pie Plot
pie(vehicle$State)
# Pie Plot
pie(table(vehicle$State))
# Scatter Plot
plot(vehicle$lh,vehicle$lc)
# MultiPlot
pairs(vehicle[2:6])
install.packages("scatterplot3d")
# scatter plot 3D
library(scatterplot3d)
str(vehicle)
scatterplot3d(vehicle$lc,vehicle$lc,vehicle$mc)
# Contour plot
data("volcano")
str(volcano)
View(volcano)
View(Titanic)
filled.contour(volcano,color=terrain.colors,asp = 1,
plot.axes = contour(volcano,add = T))
#3D surface plot
persp(volcano,theta = 25,phi = 30,expand = 0.5,col = "lightblue")
persp(vehicle,theta = 25,phi = 30,expand = 0.5,col = "lightblue")
persp(vehicle$lc,theta = 25,phi = 30,expand = 0.5,col = "lightblue")
library(psych)
?psych
VehicleFailureData <- read.csv("D:/R by Bharatendra Rai/VehicleFailureData.csv")
View(VehicleFailureData)
data<- VehicleFailureData
# Multiple Plots
pairs.panels(data[2:5])
## Color coded scatter plots
library(ggplot2)
qplot(Mileage,fm,data = data)
qplot(Mileage,fm,data = data,color=State)
## Multiple Plots
data(mpg)
str(mpg)
qplot(displ,hwy,data = mpg,facets = drv~.)
qplot(hwy,data = mpg,facets = drv~.,binwidth=1)
install.packages("googleVis")
## Motion Chart
library(googleVis)
data("Fruits")
str(Fruits)
mychart<- gvisMotionChart(Fruits,idvar = "Fruit","Year") # gvisMotionChart- googleVisualization MotionChart
plot(mychart)
data("Population")
head(Population)
w<- gvisGeoMap(Population,locationvar = "Country",numvar = "Population")
plot(w)
install.packages("igraph")
## Network graph
library(igraph)
install.packages("devtools")
install.packages("rpivotTable")
## Install packages
library(devtools)
install_github('ramnathv/htmlwidgets')
install_github('smartinsightsfromdata/rpivotTable')
## Load rpivotTable
library(rpivotTable)
data(mtcars)
## One line to create pivot table
rpivotTable(mtcars, rows='gear', col='cyl', aggregatorName='Average',
vals='mpg', rendererName='Treemap')
# we can use vehicle faiure data
rpivotTable(vehicle, rows='State', col='Count', aggregatorName='Count',
vals='State', rendererName='Treemap')
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("openintro")
install.packages("fiftystater")
install.packages("colorplaner")
library(dplyr)
library(ggplot2)
library(choroplethr)
library(choroplethrMaps)
library(openintro)
#Data
vehicle<- read.csv(file.choose(),header = T)
car<- as_data_frame(vehicle)
car
View(car)
## Data Manipulation with dplyr filter
# Filter
car%>%
filter(State=='CA' | State=='TX' | State=='FL')
car %>%
filter(State='CA',Mileage)
car %>%
filter(State='CA',Mileage>1000)
car %>%
filter(State=='CA',Mileage>1000)
car%>%
filter(State=='CA' | State=='TX' | State=='FL') %>%
arrange(desc(Mileage))
car %>%
summarise(Avg_lc = mean(lc),
sd_lc = sd(lc),
max_lc = max(lc),
min_lc = min(lc),
sum_lc = sum(lc),
median_lc = median(lc),
total = n())
## Data Manipulation with dplyr group by
car %>%
group_by(State) %>%
summarise(Avg_lc = mean(lc),
sd_lc = sd(lc),
max_lc = max(lc),
min_lc = min(lc),
sum_lc = sum(lc),
median_lc = median(lc),
total = n()) %>%
arrange(desc(Avg_lc))
## Data Manipulation with dplyr Mutate
car %>%
group_by(State) %>%
mutate(cph=sum(lc)/sum(lh)) %>%
summarise(Avg_cph= mean(cph),
Avg_mileage=mean(Mileage)) %>%
arrange(desc(Avg_cph))
# Visualization
## Histogram
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lc,fill=State)) +
geom_histogram(alpha=0.8,color="darkblue") +
ggtitle('Labor cost in Top 3 States')
# Visualization
## Histogram
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lc,fill=State)) +
geom_histogram(alpha=0.8,color="darkblue") +
ggtitle('Labor cost in Top 3 States') +
facet_wrap(~State)
## Visualization ggplot2 with density
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lc,fill=State)) +
geom_density(alpha=0.8,color="darkblue") +
ggtitle('Labor cost in Top 3 States')
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc)) +
geom_plot(alpha=0.8,color="darkblue") +
ggtitle('Labor cost in Top 3 States')
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc)) +
geom_point(alpha=0.8,color="darkblue") +
ggtitle('Labor cost in Top 3 States')
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc)) +
geom_point(alpha=0.8,color="darkblue") +
geom_smooth(se=0) # se = standard error = 0, geom_smooth for smoothing
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc,col=State)) +
geom_point(alpha=0.8,color="darkblue") +
geom_smooth(se=0) # se = standard error = 0, geom_smooth for smoothing
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc,col=State,size=mc)) +
geom_point(alpha=0.8,color="darkblue") +
geom_smooth(se=0) # se = standard error = 0, geom_smooth for smoothing
facet_wrap(~State)
## Visualization ggplot2 with scatter plot
car%>%
filter(State=='CA' | State=='TX' | State=='FL')%>%
ggplot(aes(x=lh,y=lc,col=State,size=mc)) +
geom_point(alpha=0.8,color="darkblue") +
geom_smooth(se=0)+ # se = standard error = 0, geom_smooth for smoothing
facet_wrap(~State)
ggplot(new,aes(x=State,y=Avg_cph))+ geom_bar()
## Visualization ggplot2 with Bar plot
new<-car %>%
group_by(State) %>%
mutate(cph=sum(lc)/sum(lh)) %>%
summarise(Avg_cph= mean(cph),
Avg_mileage=mean(Mileage)) %>%
arrange(desc(Avg_cph))
ggplot(new,aes(x=State,y=Avg_cph))+ geom_bar()
ggplot(new,aes(x=State,y=Avg_cph))+ geom_col()
ggplot(new,aes(x=State,y=Avg_cph))+ geom_col()+ coord_flip()
ggplot(new,aes(x=State,y=Avg_cph,fill=State))+ geom_col()+ coord_flip()
## Visualization ggplot2 with Box plot
car %>%
group_by(State) %>%
filter(n()>50) %>%
ggplot(aes(x=State,y=Mileage,col=State))+
geom_boxplot()
colnames(new) <- c('region','value','mileage')
new
# lets do abbrebation
new$region <- abbr2state(new$region)
new
new$region <- tolower(new$region)
new<- new[-1,] # remove first row, keep all columns
state_choropleth(new,
title="Car Failures in US",
legend = "Number of Failures")
# Map-2
ggplot(new,aes(map_id = region)) +
geom_map(aes(fill=mileage),map=fifty_states)
# Map-2
ggplot(new,aes(map_id = region)) +
geom_map(aes(fill=mileage),map=fifty_states)+
expand_limits(x=fifty_states$long,y=fifty_states$lat)+
coord_map()+
scale_x_continuous(breaks = NULL)+
scale_y_continuous(breaks = NULL)+
labs(x="",y="") +
theme(legend.position = "bottom",
panel.background = element_blank())
library(igraph)
g<- graph(c(1,2))
plot(g)
plot(g,
vertex.color="green",
vertex.size=40)
plot(g,
vertex.color="green",
vertex.size=40,
edge.color='red')
g<- graph(c(1,2,3,3,4,4,1)) # eg like 1 sends email to 2, 2 to 3 and so on
plot(g,
vertex.color="green",
vertex.size=40,
edge.color='red')
g<- graph(c(1,2,3,3,4,4,1)) # eg like 1 sends email to 2, 2 to 3 and so on
g<- graph(c(1,2,2,3,3,4,4,1)) # eg like 1 sends email to 2, 2 to 3 and so on
plot(g,
vertex.color="green",
vertex.size=40,
edge.color='red')
g<- graph(c(1,2,2,3,3,4,4,1),directed = F) # eg like 1 sends email to 2, 2 to 3 and so on
plot(g,
vertex.color="green",
vertex.size=40,
edge.color='red')
g<- graph(c(1,2,2,3,3,4,4,1),directed = F,n=7) # eg like 1 sends email to 2, 2 to 3 and so on
# directed = F means previously we have arrow from 1 to 2, 2 to 3 and so on. Now directed=F means we are omitting arrow marks
plot(g,
vertex.color="green",
vertex.size=40,
edge.color='red')
g[]
g1<-graph(c("Amy","Ram","Ram","Li","Li","Amy",
"Amy","Li","Kate","Li"))
plot(g1,
vertex.color="green",
vertex.size=40,
edge.color='red')
g1
g1<-graph(c("Amy","Ram","Ram","Li","Li","Amy",
"Amy","Li","Kate","Li"),directed = F)
plot(g1,
vertex.color="green",
vertex.size=40,
edge.color='red')
g1
g1<-graph(c("Amy","Ram","Ram","Li","Li","Amy",
"Amy","Li","Kate","Li"))
plot(g1,
vertex.color="green",
vertex.size=40,
edge.color='red')
g1
## Network measures
degree(g1) # degree means no of connections
## Network measures
degree(g1,mode = "all") # degree means no of connections
degree(g1,mode = "in")
degree(g1,mode = "out")
diameter(g1,directed = F,weights = NA)
edge_density(g1,loops = F) # incase if we have no loops we will indicate as loops=F
reciprocity(g1)
closeness(g1,mode = 'all',weights = NA)
betweenness(g1,directed = T,weights = NA)
edge_betweenness(g1,directed = T,weights = NA)
?ntry
?ntree
set.seed(12345)
##bivariate normal distribution
x<- rnorm(1000,0,5)
y<- rnorm(1000,0,1)
par(mfrow=c(1,2))
plot(x,y)
x1 <- c(-14,-14,14,14); y1 <- c(-2.5,2.5,-2.5,2.5)
points(x1,y1,col="red",pch=19)
x <- c(x,x1); y <- c(y,y1)
data = cbind(x,y)
data.head()
data
setwd('D:/python using jupyter/Data Preprocessing')
abalone = read.csv('Abalone.csv',header = TRUE,sep = ',')
names(abalone)
names(abalone) <- c("sex", "length", "diameter", "height", "weight.whole",
"weight.shucked", "weight.viscera", "weight.shell", "rings")
aba_out<- abalone[,2:3]
head(aba_out)
out<- which((aba_out$length <0.25 & aba_out$diameter > 0.25) |
(aba_out$length>0.6 & aba_out$diameter<0.4)|
(aba_out$length>0.25 & aba_out$diameter<0.15))
outliers<- rep(1,length(aba_out[,1]))
outliers[out] <- 2
head(outliers)
head(aba_out)
plot(aba_out,col = outliers,pch=18)
return(as.vector(which(rowSums(erg>0)>0)))
#1. Boxplot Method
bp<- function(X,fac){
meidan<- sapply(X,median)
q25 <- sapply(X, function(x) quantile(x,probs = 0.25))
q75 <- sapply(X, function(x) quantile(x,probs = 0.75))
erg <- t(apply(X, 1,function(x) abs(med-x)-fac*(q75-q25)))
return(as.vector(which(rowSums(erg>0)>0)))
}
bp_app <- function(X,a){
outliers<- rep(1,length(X[,1]))
outliers[bp[X,a]] <-2
outliers <- as.factor(outliers)
levels(outliers) <- C('No outlier', 'Out lier')
print(table(outliers))
if(table(outliers)[2] >0) plot(X,col=outliers,pch=18)
return(outliers)
}
### application bi-variate normal distribution####
par(mfrow=c(1,2))
print("Boxplot methode with factor 1.5 on bivariate normal-distribution")
bp1.5_1 = bp_app(as.data.frame(data,1.5))
bp1.5_1=bp_app(as.data.frame(data),1.5)
print("Boxplot methode with factor 3 on bivariate normal-distribution")
bp3_1=bp_app(as.data.frame(data),3)
# now with abalone data ####
print("Boxplot methode with factor 1.5 on abalone data")
bp1.5_2 <-bp_app(aba_out,1.5)
print("Boxplot methode with factor 3 on abalone data")
bp3_2 <- bp_app(aba_out,3)
#2. Using euclid method
euclid<- function(X,fac){
med <-sapply(X,median)
erg <- t(apply(X, 1, function(x) (med-x)^2))
dist <- sqrt(rowSums(erg))
#   print(plot(dist))
return(dist > fac*median(dist))}
#2. Using euclid method
euclid<- function(X,fac){
med <-sapply(X,median)
erg <- t(apply(X, 1, function(x) (med-x)^2))
dist <- sqrt(rowSums(erg))
#   print(plot(dist))
return(dist > fac*median(dist))}
euclid_app <-function(X,a){
outliers <- rep(1,length(X[,1]))
outliers[euclid(X,a)] <- 2
outliers<- as.factor(outliers)
levels(outliers) <- c("No Outlier","Outlier")
print(table(outliers))
if(table(outliers)[2] > 0)plot(X,col=outliers,pch=18)
#return(outliers)
}
#### application on bivariate Normal-Distribution ####
print("Euclid methode on bivariate normal_distribution")
par(mfrow=c(1,2))
data_std <- apply(data,2,function(x)x/(max(x)-min(x)))
euclid_app(as.data.frame(data_std),3)
aba_std <- apply(aba_out,2,function(x)x/(max(x)-min(x)))
print("Euclid methode on abalone data")
euclid_app(as.data.frame(aba_std),3)
#3. OUtlier detection using PCA
#### bivariate normal-distribution ####
par(mfcol=c(2,2))
print("Outlier detection using PCA with Factor 1.5 on bivariate normal-distribution")
PCA1.5_1 <-bp_app(as.data.frame(princomp(data_std)$scores)[,1:2],1.5)
plot(data,col=PCA1.5_1,pch=18)
print("Outlier detection using PCA with Factor 3 on bivariate normal-distribution")
PCA3_1 <-bp_app(as.data.frame(princomp(data_std)$scores)[,1:2],3)
### abalone ###
print("Outlier detection using PCA with Factor 3 on abalones data")
PCA3_2 <- bp_app(as.data.frame(princomp(aba_std)$scores)[,1:2],3)
plot(aba_out,col=PCA3_2,pch=18)
#4. Outlier detection using Kmeans
#### bivariate Normal-Distribution ####
par(mfcol= c(3,2))
cl1_1 <- kmeans(data_std,50)
ind <- as.vector(which(table(cl1_1$cluster)< 10))
out <- ifelse(cl1_1$cluster %in% ind,2,1)
plot(as.data.frame(data),pch=18,col=out, main="A1) bivariate normal-distr.:ncl=50 , minpoints=10")
cl2_1 <- kmeans(data_std,100)
ind <- as.vector(which(table(cl2_1$cluster)< 10))
out <- ifelse(cl2_1$cluster %in% ind,2,1)
plot(as.data.frame(data),pch=18,col=out, main="A2) bivariate normal-distr.:ncl=100 , minpoints=10")
cl3_1 <- kmeans(data_std,50)
ind <- as.vector(which(table(cl3_1$cluster)< 5))
out <- ifelse(cl3_1$cluster %in% ind,2,1)
plot(as.data.frame(data),pch=18,col=out, main="A3) bivariate normal-distr.:ncl=50 , minpoints=5")
### abalone ###
cl1_2 <- kmeans(aba_std,200)
ind <- as.vector(which(table(cl1_2$cluster)< 5))
out <- ifelse(cl1_2$cluster %in% ind,2,1)
plot(as.data.frame(aba_out),pch=18,col=out, main="B1) abalones:ncl=200 , minpoints=5")
cl3_2 <- kmeans(aba_std,300)
ind <- as.vector(which(table(cl3_2$cluster)< 5))
out <- ifelse(cl3_2$cluster %in% ind,2,1)
plot(as.data.frame(aba_out),pch=18,col=out, main="B2) abalones:ncl=300 , minpoints=5")
cl2_2 <- kmeans(aba_std,200)
ind <- as.vector(which(table(cl2_2$cluster)< 10))
plot(as.data.frame(aba_out),pch=18,col=out, main="B3) abalones:ncl=200 , minpoints=10")
out <- ifelse(cl2_2$cluster %in% ind,2,1)
library("dbscan")
install.packages("dbscan")
library("dbscan")
par(mfcol=c(2,2))
kNNdistplot(data_std, k =  10)
abline(h=0.1,lwd=2)
dbcl1_1<-dbscan(data_std,eps=0.1,minPts=10)
plot(as.data.frame(data),pch=18,col=ifelse(dbcl1_1$cluster==0,2,1))
### abalone ###
kNNdistplot(aba_std, k =  10)
abline(h=0.05,lwd=2)
dbcl1_2 <- dbscan(aba_std,eps=0.05,minPts=10)
plot(as.data.frame(aba_out),pch=18,col=ifelse(dbcl1_2$cluster==0,2,1))
